from django.core.management.base import BaseCommand
from faker import Faker

from services.models import Service
from specializations.models import Specialization


fake = Faker("ru_RU")


class Command(BaseCommand):
    help = "Generates dummy data for Services"

    def handle(self, *args, **options):
        self.stdout.write("Generating dummy services")

        SERVICES_NAME_CHOICES = [
            ["Эхокардиография", "Коронарография"],
            ["Химиотерапия", "Радиотерапия"],
            ["Вакцинация", "Консультация по грудному вскармливанию"],
            [
                "Электроэнцефалография (ЭЭГ)",
                "Магнитно-резонансная томография (МРТ)",
            ],
            ["Фиброгастродуоденоскопия (ФГДС)", "Колоноскопия"],
            ["Артроскопия", "Протезирование суставов"],
            ["УЗИ органов малого таза", "Кольпоскопия"],
            ["Гормональный анализ", "Тиреоидэктомия"],
            ["Психотерапия", "Фармакотерапия"],
            ["Физиотерапия", "Биологическая терапия"],
        ]

        SERVICES_DESCRIPTIONS = [
            [
                "Неинвазивный метод для изучения работы сердца с помощью ультразвуковых волн.",
                "Инвазивное исследование для оценки состояния коронарных артерий.",
            ],
            [
                "Лечение рака с использованием лекарственных препаратов.",
                "Метод лечения рака с использованием ионизирующего излучения.",
            ],
            [
                "Предоставление прививок для защиты детей от инфекционных заболеваний.",
                "Помощь и советы родителям по правильному кормлению грудью и уходу за младенцем.",
            ],
            [
                "Метод исследования мозговой активности с помощью электродов.",
                "Неинвазивный метод исследования мозга и спинного мозга с использованием магнитных полей.",
            ],
            [
                "Эндоскопическое исследование верхних отделов пищеварительной системы.",
                "Эндоскопическое исследование толстого кишечника и заднего прохода.",
            ],
            [
                "Минимально инвазивный метод для диагностики и лечения травм и заболеваний суставов.",
                "Хирургическое восстановление функции суставов путем имплантации протезов.",
            ],
            [
                "Ультразвуковое исследование для оценки состояния женских органов.",
                "Визуальное исследование шейки матки для выявления изменений и патологий.",
            ],
            [
                "Лабораторное исследование для оценки уровня гормонов в организме.",
                "Хирургическое удаление щитовидной железы при различных заболеваниях.",
            ],
            [
                "Лечебные методы, направленные на психологическую коррекцию и улучшение психического состояния.",
                "Лечение психических заболеваний с помощью лекарственных препаратов.",
            ],
            [
                "Лечебные процедуры, такие как ультразвуковая терапия или электрофорез.",
                "Метод лечения, использующий биологические препараты для снижения воспаления и контроля заболеваний.",
            ],
        ]
        index = 0
        if not Service.objects.exists():
            specializations = Specialization.objects.all()
            for specialization in specializations:
                services = SERVICES_NAME_CHOICES[index]
                for i in range(len(services)):
                    Service.objects.create(
                        name=SERVICES_NAME_CHOICES[index][i],
                        specialization=specialization,
                        bio=SERVICES_DESCRIPTIONS[index][i],
                    )
                index += 1

        self.stdout.write(
            self.style.SUCCESS("Dummy services generated successfully!")
        )
